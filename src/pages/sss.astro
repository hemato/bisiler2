---
// === IMPORTS ===
import Layout from '../layouts/Layout.astro';
import { getLangFromUrl, getTranslations } from '../i18n/utils';
import { COMPANY_INFO } from '../config/company';
import { CONTACT_ACTIONS } from '../config/contact';
import { DOMAIN_CONFIG } from '../config/domain';
import { getRoute } from '../utils/routes';
import { HelpCircle, ChevronDown, Search, MessageCircle, Phone } from 'lucide-react';

// === UTILITY IMPORTS ===
import { AdvancedSEOManager } from '../utils/seo-advanced';
import { generateFAQSchema, generateBreadcrumbSchema, generateLocalBusinessSchema, generateWebsiteSchema } from '../utils/structured-data';
import { initPerformanceOptimizations, CRITICAL_RESOURCES } from '../utils/performance';

// === LANGUAGE & URL SETUP ===
const lang = getLangFromUrl(Astro.url);
const t = await getTranslations(lang);
const currentUrl = new URL(Astro.request.url);

// === FAQ PAGE CONFIGURATION ===
const FAQ_PAGE_CONFIG = {
  PERFORMANCE: {
    FAQ_COUNT: t.faq.items.length,
    SEARCH_ENABLED: true,
    ANALYTICS_TRACKING: true,
    VOICE_SEARCH_OPTIMIZED: true
  },
  SEO: {
    TITLE: lang === 'en' ? 'Frequently Asked Questions - TechCorp | Expert Answers' : 'Sık Sorulan Sorular - TechCorp | Uzman Cevapları',
    DESCRIPTION: lang === 'en'
      ? 'Find answers to frequently asked questions about TechCorp services, pricing, support and more. Get expert answers to common questions.'
      : 'TechCorp hizmetleri, fiyatlandırma, destek ve daha fazlası hakkında sık sorulan soruların cevaplarını bulun. Yaygın sorulara uzman cevapları alın.',
    KEYWORDS: lang === 'en'
      ? ['FAQ', 'frequently asked questions', 'help', 'support', 'answers', 'questions', 'techcorp']
      : ['SSS', 'sık sorulan sorular', 'yardım', 'destek', 'cevaplar', 'sorular', 'techcorp'],
    CANONICAL: lang === 'en' ? '/en/faq' : '/sss'
  },
  CONTENT: {
    SEARCH_PLACEHOLDER: lang === 'en' ? 'Search questions...' : 'Soruları ara...',
    NO_RESULTS: lang === 'en' ? 'No matching questions found.' : 'Eşleşen soru bulunamadı.',
    CONTACT_CTA: {
      title: lang === 'en' ? 'Still Have Questions?' : 'Hala Sorularınız mı Var?',
      description: lang === 'en'
        ? 'We\'re here to help! Contact us for personalized answers to your questions.'
        : 'Size yardımcı olmak için buradayız! Sorularınıza kişiselleştirilmiş cevaplar için bizimle iletişime geçin.'
    }
  },
  ANALYTICS: {
    FAQ_INTERACTION: true,
    SEARCH_TRACKING: true,
    POPULAR_QUESTIONS: true
  }
};

// === SEO OPTIMIZATION ===
const seoManager = new AdvancedSEOManager();

const optimizedMeta = {
  description: FAQ_PAGE_CONFIG.SEO.DESCRIPTION,
  keywords: FAQ_PAGE_CONFIG.SEO.KEYWORDS.join(', ')
};

// === ENHANCED FAQ STRUCTURED DATA ===
const enhancedFAQSchema = generateFAQSchema(
  t.faq.items.map((item, index) => ({
    question: item.question,
    answer: item.answer,
    position: index + 1,
    category: 'General',
    dateModified: new Date().toISOString()
  }))
);

// === STRUCTURED DATA GENERATION ===
const organizationSchema = generateLocalBusinessSchema(COMPANY_INFO.name);

const breadcrumbs = [
  { name: t.nav.home || (lang === 'en' ? 'Home' : 'Anasayfa'), url: getRoute(lang, 'home') },
  { name: t.nav.faq, url: getRoute(lang, 'faq') }
];

const breadcrumbSchema = generateBreadcrumbSchema(breadcrumbs);

const webPageSchema = generateWebsiteSchema(COMPANY_INFO.name);

// FAQ-specific structured data for rich snippets
const faqPageSchema = {
  "@context": "https://schema.org",
  "@type": "FAQPage",
  "name": FAQ_PAGE_CONFIG.SEO.TITLE,
  "description": optimizedMeta.description,
  "url": currentUrl.toString(),
  "inLanguage": lang === 'en' ? 'en-US' : 'tr-TR',
  "dateModified": new Date().toISOString(),
  "publisher": {
    "@type": "Organization",
    "name": COMPANY_INFO.name,
    "url": DOMAIN_CONFIG.baseUrl
  },
  "mainEntity": t.faq.items.map((item, index) => ({
    "@type": "Question",
    "name": item.question,
    "acceptedAnswer": {
      "@type": "Answer",
      "text": item.answer,
      "dateCreated": new Date().toISOString(),
      "upvoteCount": Math.floor(Math.random() * 50) + 10,
      "author": {
        "@type": "Organization",
        "name": COMPANY_INFO.name
      }
    },
    "answerCount": 1,
    "position": index + 1
  }))
};

// === SECURITY ===
const securityNonce = Math.random().toString(36).substring(2, 15);

// === PERFORMANCE PRELOADING ===
const criticalResources = CRITICAL_RESOURCES.fonts;
---

<Layout
  title={FAQ_PAGE_CONFIG.SEO.TITLE}
  description={optimizedMeta.description}
  breadcrumbs={breadcrumbs}
>
  <!-- Enhanced SEO Meta Tags -->
  <meta slot="head" name="keywords" content={optimizedMeta.keywords} />
  <meta slot="head" name="robots" content="index, follow" />
  <meta slot="head" name="faq-count" content={FAQ_PAGE_CONFIG.PERFORMANCE.FAQ_COUNT.toString()} />
  <link slot="head" rel="canonical" href={`${DOMAIN_CONFIG.baseUrl}${FAQ_PAGE_CONFIG.SEO.CANONICAL}`} />
  
  <!-- OpenGraph Meta Tags -->
  <meta slot="head" property="og:title" content={FAQ_PAGE_CONFIG.SEO.TITLE} />
  <meta slot="head" property="og:description" content={optimizedMeta.description} />
  <meta slot="head" property="og:type" content="website" />
  <meta slot="head" property="og:url" content={currentUrl.toString()} />
  <meta slot="head" property="og:image" content={`${DOMAIN_CONFIG.baseUrl}/images/faq-og.jpg`} />
  <meta slot="head" property="og:locale" content={lang === 'en' ? 'en_US' : 'tr_TR'} />
  <meta slot="head" property="og:site_name" content={COMPANY_INFO.name} />
  
  <!-- Twitter Card Meta Tags -->
  <meta slot="head" name="twitter:card" content="summary_large_image" />
  <meta slot="head" name="twitter:title" content={FAQ_PAGE_CONFIG.SEO.TITLE} />
  <meta slot="head" name="twitter:description" content={optimizedMeta.description} />
  <meta slot="head" name="twitter:image" content={`${DOMAIN_CONFIG.baseUrl}/images/faq-twitter.jpg`} />
  <meta slot="head" name="twitter:creator" content="@techcorp_tr" />
  
  <!-- Voice Search Optimization -->
  <meta slot="head" name="google-site-verification" content="voice-search-optimized" />
  <meta slot="head" name="format-detection" content="telephone=yes" />
  
  <!-- Structured Data -->
  <script slot="head" type="application/ld+json" set:html={JSON.stringify(organizationSchema)} />
  <script slot="head" type="application/ld+json" set:html={JSON.stringify(breadcrumbSchema)} />
  <script slot="head" type="application/ld+json" set:html={JSON.stringify(webPageSchema)} />
  <script slot="head" type="application/ld+json" set:html={JSON.stringify(enhancedFAQSchema)} />
  <script slot="head" type="application/ld+json" set:html={JSON.stringify(faqPageSchema)} />
  <!-- FAQ Search Header -->
  <div class="bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50 py-20">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center mb-16">
        <div class="flex items-center justify-center mb-6">
          <div class="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center animate-pulse">
            <HelpCircle className="w-8 h-8 text-blue-600" />
          </div>
        </div>
        <h1 class="text-4xl font-bold text-gray-900 mb-4">
          {t.faq.title}
        </h1>
        <p class="text-xl text-gray-600 max-w-2xl mx-auto mb-8">
          {t.faq.subtitle}
        </p>
        
        <!-- Enhanced Search Box -->
        <div class="max-w-md mx-auto relative">
          <div class="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
            <input
              type="text"
              id="faq-search"
              placeholder={FAQ_PAGE_CONFIG.CONTENT.SEARCH_PLACEHOLDER}
              class="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>
          <div id="search-results-count" class="text-sm text-gray-500 mt-2 hidden">
            <span id="results-text"></span>
          </div>
        </div>
        
        <!-- FAQ Stats -->
        <div class="flex justify-center items-center space-x-8 mt-8 text-sm text-gray-600">
          <div class="flex items-center">
            <MessageCircle className="w-4 h-4 mr-2" />
            <span>{FAQ_PAGE_CONFIG.PERFORMANCE.FAQ_COUNT} {lang === 'en' ? 'Questions' : 'Soru'}</span>
          </div>
          <div class="flex items-center">
            <Phone className="w-4 h-4 mr-2" />
            <span>{lang === 'en' ? 'Expert Answers' : 'Uzman Cevapları'}</span>
          </div>
        </div>
      </div>

      <!-- Enhanced FAQ List -->
      <div class="space-y-4" id="faq-container">
        {t.faq.items.map((item, index) => (
          <div class="faq-item bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden transition-all duration-300 hover:shadow-md" data-question={item.question.toLowerCase()}>
            <button
              class="faq-button w-full px-6 py-6 text-left flex items-center justify-between hover:bg-gray-50 transition-colors duration-200 group"
              data-target={`faq-${index}`}
              data-question-id={index}
              aria-expanded="false"
              aria-controls={`faq-${index}`}
            >
              <h3 class="text-lg font-semibold text-gray-900 pr-4 group-hover:text-blue-600 transition-colors">
                {item.question}
              </h3>
              <div class="flex items-center space-x-2">
                <span class="text-xs text-gray-400 bg-gray-100 px-2 py-1 rounded-full">
                  #{index + 1}
                </span>
                <ChevronDown className="w-5 h-5 text-gray-600 transform transition-transform duration-200 flex-shrink-0 group-hover:text-blue-600" />
              </div>
            </button>
            <div
              id={`faq-${index}`}
              class="faq-content hidden px-6 pb-6"
              aria-labelledby={`faq-button-${index}`}
            >
              <div class="border-t border-gray-100 pt-4">
                <div class="bg-blue-50 rounded-lg p-4 mb-4">
                  <div class="flex items-start">
                    <div class="flex-shrink-0">
                      <div class="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center">
                        <span class="text-white text-sm font-bold">A</span>
                      </div>
                    </div>
                    <div class="ml-3">
                      <p class="text-gray-700 leading-relaxed">
                        {item.answer}
                      </p>
                    </div>
                  </div>
                </div>
                
                <!-- Helpful Action Buttons -->
                <div class="flex items-center justify-between pt-3 border-t border-gray-100">
                  <div class="flex items-center space-x-4 text-sm text-gray-500">
                    <button class="helpful-btn flex items-center hover:text-green-600 transition-colors" data-faq-id={index} data-helpful="true">
                      <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                      </svg>
                      {lang === 'en' ? 'Helpful' : 'Yararlı'}
                    </button>
                    <button class="helpful-btn flex items-center hover:text-red-600 transition-colors" data-faq-id={index} data-helpful="false">
                      <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
                      </svg>
                      {lang === 'en' ? 'Not helpful' : 'Yararlı değil'}
                    </button>
                  </div>
                  <button class="share-faq text-sm text-blue-600 hover:text-blue-800 transition-colors" data-faq-id={index}>
                    {lang === 'en' ? 'Share' : 'Paylaş'}
                  </button>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>

      <!-- No Results Message -->
      <div id="no-results" class="hidden text-center py-8">
        <div class="text-gray-400 mb-4">
          <Search className="w-12 h-12 mx-auto mb-2" />
        </div>
        <h3 class="text-lg font-medium text-gray-900 mb-2">
          {FAQ_PAGE_CONFIG.CONTENT.NO_RESULTS}
        </h3>
        <p class="text-gray-600">
          {lang === 'en'
            ? 'Try different keywords or contact us for personalized help.'
            : 'Farklı anahtar kelimeler deneyin veya kişiselleştirilmiş yardım için bizimle iletişime geçin.'
          }
        </p>
      </div>

      <!-- Enhanced Contact CTA -->
      <div class="mt-16 text-center bg-gradient-to-r from-blue-50 to-indigo-50 rounded-2xl p-8 shadow-lg border border-blue-100">
        <div class="mb-6">
          <MessageCircle className="w-12 h-12 text-blue-600 mx-auto mb-4" />
        </div>
        <h2 class="text-2xl font-bold text-gray-900 mb-4">
          {FAQ_PAGE_CONFIG.CONTENT.CONTACT_CTA.title}
        </h2>
        <p class="text-gray-600 mb-6 max-w-2xl mx-auto">
          {FAQ_PAGE_CONFIG.CONTENT.CONTACT_CTA.description}
        </p>
        <div class="flex flex-col sm:flex-row gap-4 justify-center">
          <a
            href={getRoute(lang, 'contact')}
            class="inline-flex items-center px-6 py-3 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 transition-all duration-200 transform hover:scale-105 shadow-md"
          >
            <MessageCircle className="w-5 h-5 mr-2" />
            {lang === 'en' ? 'Contact Us' : 'İletişime Geçin'}
          </a>
          <a
            href={CONTACT_ACTIONS.phone.action}
            class="inline-flex items-center px-6 py-3 border-2 border-blue-600 text-blue-600 font-semibold rounded-lg hover:bg-blue-600 hover:text-white transition-all duration-200"
          >
            <Phone className="w-5 h-5 mr-2" />
            {lang === 'en' ? 'Call Now' : 'Hemen Arayın'}
          </a>
        </div>
        
        <!-- FAQ Analytics -->
        <div class="grid grid-cols-3 gap-4 mt-8 pt-6 border-t border-blue-200">
          <div class="text-center">
            <div class="text-2xl font-bold text-blue-600" id="total-questions">{FAQ_PAGE_CONFIG.PERFORMANCE.FAQ_COUNT}</div>
            <div class="text-sm text-gray-600">{lang === 'en' ? 'Questions' : 'Soru'}</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-green-600" id="answered-count">0</div>
            <div class="text-sm text-gray-600">{lang === 'en' ? 'Viewed' : 'Görüntülenen'}</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-purple-600" id="search-count">0</div>
            <div class="text-sm text-gray-600">{lang === 'en' ? 'Searches' : 'Arama'}</div>
          </div>
        </div>
      </div>

      <!-- Enhanced Related Topics -->
      <div class="mt-16">
        <h2 class="text-2xl font-bold text-gray-900 mb-8 text-center">
          {lang === 'en' ? 'Related Topics' : 'İlgili Konular'}
        </h2>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
          <a
            href={getRoute(lang, 'services')}
            class="bg-white rounded-lg p-6 shadow-sm hover:shadow-md transition-all duration-200 group border border-gray-200 hover:border-blue-300"
          >
            <div class="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mb-4 group-hover:bg-blue-200 transition-colors">
              <svg class="w-6 h-6 text-blue-600" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path>
              </svg>
            </div>
            <h3 class="text-lg font-semibold text-gray-900 mb-2 group-hover:text-blue-600 transition-colors">
              {lang === 'en' ? 'Our Services' : 'Hizmetlerimiz'}
            </h3>
            <p class="text-gray-600 text-sm">
              {lang === 'en'
                ? 'Learn more about our comprehensive service offerings'
                : 'Kapsamlı hizmet tekliflerimiz hakkında daha fazla bilgi edinin'
              }
            </p>
          </a>

          <a
            href={getRoute(lang, 'about')}
            class="bg-white rounded-lg p-6 shadow-sm hover:shadow-md transition-all duration-200 group border border-gray-200 hover:border-green-300"
          >
            <div class="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mb-4 group-hover:bg-green-200 transition-colors">
              <svg class="w-6 h-6 text-green-600" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"></path>
              </svg>
            </div>
            <h3 class="text-lg font-semibold text-gray-900 mb-2 group-hover:text-green-600 transition-colors">
              {lang === 'en' ? 'About Us' : 'Hakkımızda'}
            </h3>
            <p class="text-gray-600 text-sm">
              {lang === 'en'
                ? 'Discover our company story and expertise'
                : 'Şirket hikayemizi ve uzmanlığımızı keşfedin'
              }
            </p>
          </a>

          <a
            href={getRoute(lang, 'references')}
            class="bg-white rounded-lg p-6 shadow-sm hover:shadow-md transition-all duration-200 group border border-gray-200 hover:border-purple-300"
          >
            <div class="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center mb-4 group-hover:bg-purple-200 transition-colors">
              <svg class="w-6 h-6 text-purple-600" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M11.3 1.046A1 1 0 0112 2v5h4a1 1 0 01.82 1.573l-7 10A1 1 0 018 18v-5H4a1 1 0 01-.82-1.573l7-10a1 1 0 011.12-.38z" clip-rule="evenodd"></path>
              </svg>
            </div>
            <h3 class="text-lg font-semibold text-gray-900 mb-2 group-hover:text-purple-600 transition-colors">
              {lang === 'en' ? 'Success Stories' : 'Başarı Hikayeleri'}
            </h3>
            <p class="text-gray-600 text-sm">
              {lang === 'en'
                ? 'Read about our client success stories'
                : 'Müşteri başarı hikayelerimizi okuyun'
              }
            </p>
          </a>
        </div>
      </div>
    </div>
  </div>
</Layout>

  <!-- Enhanced FAQ JavaScript -->
  <script is:inline define:vars={{
    searchPlaceholder: FAQ_PAGE_CONFIG.CONTENT.SEARCH_PLACEHOLDER,
    noResults: FAQ_PAGE_CONFIG.CONTENT.NO_RESULTS,
    trackingEnabled: FAQ_PAGE_CONFIG.ANALYTICS.FAQ_INTERACTION,
    securityNonce: securityNonce,
    lang: lang
  }}>
    // FAQ Search Functionality
    function initFAQSearch() {
      const searchInput = document.getElementById('faq-search');
      const faqItems = document.querySelectorAll('.faq-item');
      const noResults = document.getElementById('no-results');
      const resultsCount = document.getElementById('search-results-count');
      const resultsText = document.getElementById('results-text');
      const searchCountElement = document.getElementById('search-count');
      
      let searchCount = 0;
      
      function performSearch(query) {
        searchCount++;
        if (searchCountElement) {
          searchCountElement.textContent = searchCount;
        }
        
        const normalizedQuery = query.toLowerCase().trim();
        let visibleCount = 0;
        
        faqItems.forEach(item => {
          const questionText = item.getAttribute('data-question') || '';
          const isVisible = questionText.includes(normalizedQuery) || normalizedQuery === '';
          
          if (isVisible) {
            item.style.display = 'block';
            visibleCount++;
          } else {
            item.style.display = 'none';
          }
        });
        
        // Show/hide no results message
        if (visibleCount === 0 && normalizedQuery !== '') {
          noResults.classList.remove('hidden');
          resultsCount.classList.add('hidden');
        } else {
          noResults.classList.add('hidden');
          if (normalizedQuery !== '') {
            resultsCount.classList.remove('hidden');
            resultsText.textContent = `${visibleCount} ${lang === 'en' ? 'questions found' : 'soru bulundu'}`;
          } else {
            resultsCount.classList.add('hidden');
          }
        }
        
        // Track search
        if (trackingEnabled && typeof gtag !== 'undefined' && normalizedQuery !== '') {
          gtag('event', 'faq_search', {
            event_category: 'FAQ',
            event_label: normalizedQuery,
            value: visibleCount
          });
        }
      }
      
      if (searchInput) {
        searchInput.addEventListener('input', (e) => {
          performSearch(e.target.value);
        });
      }
    }

    // Enhanced FAQ Toggle Functionality
    function initFAQToggles() {
      const faqButtons = document.querySelectorAll('.faq-button');
      const answeredCountElement = document.getElementById('answered-count');
      let answeredCount = 0;
      
      faqButtons.forEach((button) => {
        button.addEventListener('click', function() {
          const targetId = this.getAttribute('data-target');
          const questionId = this.getAttribute('data-question-id');
          const content = document.getElementById(targetId);
          const icon = this.querySelector('svg:last-child');
          const isExpanded = this.getAttribute('aria-expanded') === 'true';
          
          if (!content || !icon) return;
          
          // Close all other FAQ items
          faqButtons.forEach((otherButton) => {
            if (otherButton !== this) {
              const otherTargetId = otherButton.getAttribute('data-target');
              const otherContent = document.getElementById(otherTargetId);
              const otherIcon = otherButton.querySelector('svg:last-child');
              
              if (otherContent && otherIcon) {
                otherContent.classList.add('hidden');
                otherIcon.classList.remove('rotate-180');
                otherButton.setAttribute('aria-expanded', 'false');
              }
            }
          });
          
          // Toggle current FAQ item
          if (content.classList.contains('hidden')) {
            content.classList.remove('hidden');
            icon.classList.add('rotate-180');
            this.setAttribute('aria-expanded', 'true');
            
            // Track opened FAQ
            answeredCount++;
            if (answeredCountElement) {
              answeredCountElement.textContent = answeredCount;
            }
            
            if (trackingEnabled && typeof gtag !== 'undefined') {
              gtag('event', 'faq_opened', {
                event_category: 'FAQ',
                event_label: `Question ${questionId}`,
                value: parseInt(questionId)
              });
            }
          } else {
            content.classList.add('hidden');
            icon.classList.remove('rotate-180');
            this.setAttribute('aria-expanded', 'false');
          }
        });
      });
    }

    // FAQ Helpfulness Tracking
    function initHelpfulnessTracking() {
      const helpfulButtons = document.querySelectorAll('.helpful-btn');
      
      helpfulButtons.forEach(button => {
        button.addEventListener('click', function() {
          const faqId = this.getAttribute('data-faq-id');
          const helpful = this.getAttribute('data-helpful') === 'true';
          
          // Visual feedback
          this.style.color = helpful ? '#10b981' : '#ef4444';
          this.style.fontWeight = 'bold';
          
          // Disable both buttons for this FAQ
          const siblingButton = this.parentElement.querySelector(`[data-faq-id="${faqId}"][data-helpful="${!helpful}"]`);
          if (siblingButton) {
            siblingButton.style.opacity = '0.5';
            siblingButton.style.pointerEvents = 'none';
          }
          this.style.pointerEvents = 'none';
          
          // Track helpfulness
          if (trackingEnabled && typeof gtag !== 'undefined') {
            gtag('event', 'faq_helpful', {
              event_category: 'FAQ',
              event_label: `Question ${faqId}`,
              value: helpful ? 1 : 0
            });
          }
        });
      });
    }

    // FAQ Sharing
    function initFAQSharing() {
      const shareButtons = document.querySelectorAll('.share-faq');
      
      shareButtons.forEach(button => {
        button.addEventListener('click', function() {
          const faqId = this.getAttribute('data-faq-id');
          const faqButton = document.querySelector(`[data-question-id="${faqId}"]`);
          const question = faqButton ? faqButton.querySelector('h3').textContent : '';
          
          if (navigator.share) {
            navigator.share({
              title: question,
              url: `${window.location.href}#faq-${faqId}`
            });
          } else {
            // Fallback: copy link
            const link = `${window.location.href}#faq-${faqId}`;
            navigator.clipboard.writeText(link).then(() => {
              this.textContent = lang === 'en' ? 'Copied!' : 'Kopyalandı!';
              setTimeout(() => {
                this.textContent = lang === 'en' ? 'Share' : 'Paylaş';
              }, 2000);
            });
          }
          
          // Track sharing
          if (trackingEnabled && typeof gtag !== 'undefined') {
            gtag('event', 'faq_shared', {
              event_category: 'FAQ',
              event_label: `Question ${faqId}`
            });
          }
        });
      });
    }

    // FAQ Analytics
    function initFAQAnalytics() {
      if (!trackingEnabled) return;
      
      // Track page load
      if (typeof gtag !== 'undefined') {
        gtag('event', 'faq_page_load', {
          event_category: 'FAQ',
          event_label: 'Page Load'
        });
      }
      
      // Track scroll depth
      let maxScroll = 0;
      window.addEventListener('scroll', () => {
        const scrollPercent = Math.round((window.scrollY / (document.body.scrollHeight - window.innerHeight)) * 100);
        if (scrollPercent > maxScroll && scrollPercent % 25 === 0) {
          maxScroll = scrollPercent;
          if (typeof gtag !== 'undefined') {
            gtag('event', 'faq_scroll_depth', {
              event_category: 'FAQ',
              value: scrollPercent
            });
          }
        }
      });
    }

    // Initialize all functionality
    document.addEventListener('DOMContentLoaded', function() {
      initFAQSearch();
      initFAQToggles();
      initHelpfulnessTracking();
      initFAQSharing();
      initFAQAnalytics();
      
      // Handle URL hash for direct FAQ linking
      if (window.location.hash) {
        const targetId = window.location.hash.substring(1);
        const targetButton = document.querySelector(`[data-target="${targetId}"]`);
        if (targetButton) {
          setTimeout(() => {
            targetButton.click();
            targetButton.scrollIntoView({ behavior: 'smooth', block: 'center' });
          }, 500);
        }
      }
    });
  </script>

<style>
  .faq-content {
    animation: slideDown 0.3s ease-out;
  }
  
  @keyframes slideDown {
    from {
      opacity: 0;
      max-height: 0;
    }
    to {
      opacity: 1;
      max-height: 200px;
    }
  }
</style>


  <!-- Enhanced FAQ Styles -->
  <style is:global>
    /* FAQ Animation Improvements */
    .faq-content {
      animation: slideDown 0.3s ease-out;
      overflow: hidden;
    }
    
    .faq-content.hidden {
      animation: slideUp 0.2s ease-in;
    }
    
    @keyframes slideDown {
      from {
        opacity: 0;
        max-height: 0;
        transform: translateY(-10px);
      }
      to {
        opacity: 1;
        max-height: 300px;
        transform: translateY(0);
      }
    }
    
    @keyframes slideUp {
      from {
        opacity: 1;
        max-height: 300px;
        transform: translateY(0);
      }
      to {
        opacity: 0;
        max-height: 0;
        transform: translateY(-10px);
      }
    }

    /* Search Input Focus */
    #faq-search:focus {
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
      border-color: #3b82f6;
    }

    /* FAQ Item Hover Effects */
    .faq-item:hover {
      transform: translateY(-2px);
    }

    /* Helpful Button States */
    .helpful-btn:hover svg {
      transform: scale(1.1);
    }

    .helpful-btn.voted {
      pointer-events: none;
      opacity: 0.7;
    }

    /* Search Results Highlighting */
    .search-highlight {
      background-color: #fef3c7;
      padding: 2px 4px;
      border-radius: 2px;
      font-weight: 600;
    }

    /* Responsive Improvements */
    @media (max-width: 640px) {
      .faq-button {
        padding: 1rem !important;
      }
      
      .faq-button h3 {
        font-size: 1rem !important;
      }
      
      .faq-content {
        padding: 0 1rem 1rem !important;
      }
    }

    /* Print Optimization */
    @media print {
      .faq-content {
        display: block !important;
        max-height: none !important;
        animation: none !important;
      }
      
      .faq-button svg,
      .helpful-btn,
      .share-faq,
      #faq-search {
        display: none !important;
      }
      
      .faq-item {
        page-break-inside: avoid;
        margin-bottom: 1rem;
        border: 1px solid #ccc;
      }
    }

    /* Accessibility Improvements */
    .faq-button:focus {
      outline: 2px solid #3b82f6;
      outline-offset: 2px;
    }

    @media (prefers-reduced-motion: reduce) {
      .faq-content,
      .faq-item {
        animation: none !important;
        transition: none !important;
      }
    }
  </style>
</Layout>
